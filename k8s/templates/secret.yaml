apiVersion: v1
kind: Secret
metadata:
  name: {{ include "chart.fullname" . }}-settings
  labels:
    {{- include "chart.labels" . | nindent 4 }}
type: Opaque
stringData:
  settings.conf: |-
    # Environment settings
    FLASK_ENV={{- .Values.lifemonitor.environment }}
    LOG_LEVEL={{- .Values.lifemonitor.log_level | default "INFO" }}

    {{- if .Values.externalServerName }}
    # The name and port number of the server (e.g.: 'lm.local:8000'),
    # used as base_url on all the links returned by the API
    EXTERNAL_SERVER_URL={{ .Values.externalServerName }}
    {{- end }}

    # Normally, OAuthLib will raise an InsecureTransportError if you attempt to use OAuth2 over HTTP,
    # rather than HTTPS. Setting this environment variable will prevent this error from being raised.
    # This is mostly useful for local testing, or automated tests. Never set this variable in production.
    #AUTHLIB_INSECURE_TRANSPORT = True

    # Uncomment to use an additional config file to configure your LifeMonitor instance.
    # Variables defined here will override those in the default configuration.
    # The path should be absolute or relative to the instance folder
    # FLASK_APP_CONFIG_FILE=lm.py
    # Uncomment to override the default instance path folder. Only absolute paths are allowed.
    # FLASK_APP_INSTANCE_PATH=/home/lm/config_instance

    # PostgreSQL DBMS settings
    #POSTGRESQL_HOST={{ include "chart.fullname" . }}-postgresql
    POSTGRESQL_PORT={{ .Values.postgresql.service.port }}
    POSTGRESQL_DATABASE={{ .Values.postgresql.postgresqlDatabase }}
    POSTGRESQL_USERNAME={{ .Values.postgresql.postgresqlUsername }}
    POSTGRESQL_PASSWORD={{ .Values.postgresql.postgresqlPassword }}

    # Dramatiq worker settings
    WORKER_PROCESSES={{ .Values.worker.processes }}
    {{- if .Values.worker.threads }}
    WORKER_THREADS={{ .Values.worker.threads }}
    {{- end }}

    # Redis settings
    REDIS_HOST={{ .Release.Name }}-redis-master
    REDIS_PORT={{ .Values.redis.master.service.port }}
    REDIS_PASSWORD={{ .Values.redis.auth.password }}
    
    # Redis Cache
    CACHE_REDIS_HOST={{ .Release.Name }}-redis-master
    CACHE_REDIS_DB={{ .Values.cache.db }}
    CACHE_REDIS_URL=redis://:{{ .Values.redis.auth.password }}@{{ .Release.Name }}-redis-master:{{ .Values.redis.master.service.port }}/{{ .Values.cache.db }}
    CACHE_DEFAULT_TIMEOUT={{ .Values.cache.timeout.default }}
    CACHE_REQUEST_TIMEOUT={{ .Values.cache.timeout.request }}
    CACHE_SESSION_TIMEOUT={{ .Values.cache.timeout.session }}
    CACHE_WORKFLOW_TIMEOUT={{ .Values.cache.timeout.workflow }}
    CACHE_BUILD_TIMEOUT={{ .Values.cache.timeout.build }}

    # Set admin credentials
    LIFEMONITOR_ADMIN_PASSWORD={{ .Values.lifemonitor.administrator.password }}

    # Gunicorn settings
    GUNICORN_WORKERS=1
    GUNICORN_THREADS=2

    # Set a warning message (displayed in the login screen and the user's profile page)
    WARNING_MESSAGE={{- .Values.lifemonitor.warning_message | default "" }}

    {{- if .Values.identity_providers.github }}
    {{- if and .Values.identity_providers.github.client_id .Values.identity_providers.github.client_secret }}
    # Github OAuth2 settings
    GITHUB_CLIENT_ID="{{ .Values.identity_providers.github.client_id }}"
    GITHUB_CLIENT_SECRET="{{ .Values.identity_providers.github.client_secret }}"
    {{- end }}
    {{- end }}

    # Set tokens for testingService
    {{- if .Values.testing_services -}}
    {{- range $k, $v := .Values.testing_services }}
    {{ $k | upper }}_TESTING_SERVICE_URL={{ $v.api_url }}
    {{ $k | upper }}_TESTING_SERVICE_TOKEN={{ $v.token }}
    {{ $k | upper }}_TESTING_SERVICE_TYPE={{ $v.type }}
    {{- end }}
    {{- end }}
