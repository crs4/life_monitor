{{- if .Values.backup.enabled -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "chart.fullname" . }}-backup
  labels:
    app.kubernetes.io/name: {{ include "chart.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}  
spec:
  schedule: "{{ .Values.backup.schedule }}"
  successfulJobsHistoryLimit: {{ .Values.backup.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.backup.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: lifemonitor-backup
            image: {{ include "chart.lifemonitor.image" . }}
            imagePullPolicy: {{ .Values.lifemonitor.imagePullPolicy }}
            command: ["/bin/bash","-c"]
            args:
              - wait-for-redis.sh && wait-for-postgres.sh ;
                base_path="/var/data/backup" ;
                db_backups_path="${base_path}/db" ;
                crate_backups_path="${base_path}/crates" ;
                mkdir -p ${db_backups_path} ;
                mkdir -p ${crate_backups_path} ;
                ./lm-admin.py db backup -d ${db_backups_path} 2>&1 ;
                exit_code=$? ;
                if [[ ${exit_code} == 0 ]]; then 
                  find ${db_backups_path} -type f -mtime +{{ .Values.backup.retain_days }} -name '*.tar' -execdir rm -- '{}' \; ;
                  cp -urv /var/data/lm/* ${crate_backups_path}/ ;
                  exit_code=$? ;
                  if [[ ${exit_code} == 0 ]]; then 
                    echo "RO-Crates locally synched @ ${crate_backups_path}" ;
                  else echo "Error when copying RO-Crates (code ${exit_code})" ;
                  fi ;
                  {{ include "backup.remote.command" . }} ;
                  exit_code=$? ;
                  if [[ ${exit_code} == 0 ]]; then 
                    echo "Backup folder synched with the remote site '{{ .Values.backup.remote.host }}' (path {{.Values.backup.remote.path}})" ;
                  else echo "Unable to synch backup folder with the remote site '{{ .Values.backup.remote.host }}'" ; exit ${exit_code} ;
                  fi ;
                else echo "Unable to complete the backup" ; exit ${exit_code} ; 
                fi ;
            env:
            {{- include "lifemonitor.common-env" . | nindent 12 }}
            volumeMounts:
            {{- include "lifemonitor.common-volume-mounts" . | nindent 12 }}
            - name: lifemonitor-backup
              mountPath: "/var/data/backup"
          restartPolicy: OnFailure
          volumes:
            {{- include "lifemonitor.common-volume" . | nindent 10 }}
          - name: lifemonitor-backup
            persistentVolumeClaim:
              claimName: {{ .Values.backup.existingClaim }}
          {{- with .Values.lifemonitor.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .Values.lifemonitor.affinity }}
          affinity:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .Values.lifemonitor.tolerations }}
          tolerations:
            {{- toYaml . | nindent 10 }}        
          {{- end }}
      backoffLimit: 4
{{- end }}