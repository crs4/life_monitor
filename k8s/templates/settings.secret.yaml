apiVersion: v1
kind: Secret
metadata:
  name: {{ include "chart.fullname" . }}-settings
  labels:
    {{- include "chart.labels" . | nindent 4 }}
type: Opaque
stringData:
  settings.conf: |-
    # Environment settings
    FLASK_ENV={{- .Values.lifemonitor.environment }}
    LOG_LEVEL={{- .Values.lifemonitor.log_level | default "INFO" }}

    # Set SECRET_KEY
    SECRET_KEY={{- .Values.lifemonitor.secret_key | default uuidv4 | b64enc }}

    {{- if .Values.externalServerName }}
    # The name and port number of the server (e.g.: 'lm.local:8000'),
    # used as base_url on all the links returned by the API
    EXTERNAL_SERVER_URL=https://{{ .Values.externalServerName }}
    {{- end }}

    # Base URL of the LifeMonitor web app associated with this back-end instance
    WEBAPP_URL={{ .Values.webappUrl }}

    # Normally, OAuthLib will raise an InsecureTransportError if you attempt to use OAuth2 over HTTP,
    # rather than HTTPS. Setting this environment variable will prevent this error from being raised.
    # This is mostly useful for local testing, or automated tests. Never set this variable in production.
    #AUTHLIB_INSECURE_TRANSPORT = True

    # Uncomment to use an additional config file to configure your LifeMonitor instance.
    # Variables defined here will override those in the default configuration.
    # The path should be absolute or relative to the instance folder
    # FLASK_APP_CONFIG_FILE=lm.py
    # Uncomment to override the default instance path folder. Only absolute paths are allowed.
    # FLASK_APP_INSTANCE_PATH=/home/lm/config_instance

    # PostgreSQL DBMS settings
    #POSTGRESQL_HOST={{ include "chart.fullname" . }}-postgresql
    POSTGRESQL_PORT={{ .Values.postgresql.service.port }}
    POSTGRESQL_DATABASE={{ .Values.postgresql.postgresqlDatabase }}
    POSTGRESQL_USERNAME={{ .Values.postgresql.postgresqlUsername }}
    POSTGRESQL_PASSWORD={{ .Values.postgresql.postgresqlPassword }}

    # Dramatiq worker settings
    WORKER_PROCESSES={{ .Values.worker.processes }}
    {{- if .Values.worker.threads }}
    WORKER_THREADS={{ .Values.worker.threads }}
    {{- end }}

    # Redis settings
    REDIS_HOST={{ .Release.Name }}-redis-master
    REDIS_PORT={{ .Values.redis.master.service.port }}
    REDIS_PASSWORD={{ .Values.redis.auth.password }}
    
    # Redis Cache
    CACHE_REDIS_HOST={{ .Release.Name }}-redis-master
    CACHE_REDIS_DB={{ .Values.cache.db }}
    CACHE_REDIS_URL=redis://:{{ .Values.redis.auth.password }}@{{ .Release.Name }}-redis-master:{{ .Values.redis.master.service.port }}/{{ .Values.cache.db }}
    CACHE_DEFAULT_TIMEOUT={{ .Values.cache.timeout.default }}
    CACHE_REQUEST_TIMEOUT={{ .Values.cache.timeout.request }}
    CACHE_SESSION_TIMEOUT={{ .Values.cache.timeout.session }}
    CACHE_WORKFLOW_TIMEOUT={{ .Values.cache.timeout.workflow }}
    CACHE_BUILD_TIMEOUT={{ .Values.cache.timeout.build }}

    # Email sender
    MAIL_SERVER={{ .Values.mail.server }}
    MAIL_PORT={{ .Values.mail.port }}
    MAIL_USERNAME={{ .Values.mail.username }}
    MAIL_PASSWORD={{ .Values.mail.password }}
    MAIL_USE_TLS={{- if .Values.mail.tls -}}True{{- else -}}False{{- end }}
    MAIL_USE_SSL={{- if .Values.mail.ssl -}}True{{- else -}}False{{- end }}
    MAIL_DEFAULT_SENDER={{ .Values.mail.default_sender }}

    {{- if .Values.backup.enabled }}
    # Backups
    BACKUP_LOCAL_PATH="/var/data/backup"
    {{- if .Values.backup.retain_days }}
    BACKUP_RETAIN_DAYS={{ .Values.backup.retain_days }}
    {{- end }}
    {{- if .Values.backup.encryptionKeySecret }}
    BACKUP_ENCRYPTION_KEY_PATH=/lm/backup/encryption.key
    {{- end }}    
    {{- if .Values.backup.remote.enabled }}
    BACKUP_REMOTE_PATH={{ .Values.backup.remote.path }}
    BACKUP_REMOTE_HOST={{ .Values.backup.remote.host }}
    BACKUP_REMOTE_USER={{ .Values.backup.remote.user }}
    BACKUP_REMOTE_PASSWORD={{ .Values.backup.remote.password }}
    BACKUP_REMOTE_ENABLE_TLS={{- if .Values.backup.remote.tls }}True{{- else -}}False{{- end }}
    {{- end }}
    {{- end }}

    # Maintenance Mode Settings
    {{- if .Values.maintenanceMode.enabled -}}
    MAINTENANCE_MODE={{.Values.maintenanceMode.enabled}}
    MAINTENANCE_MODE_MAIN_MESSAGE={{.Values.maintenanceMode.mainMessage}}
    MAINTENANCE_MODE_SECONDARY_MESSAGE={{.Values.maintenanceMode.secondaryMessage}}
    {{- end }}

    # Set admin credentials
    LIFEMONITOR_ADMIN_PASSWORD={{ .Values.lifemonitor.administrator.password }}

    # Gunicorn settings
    GUNICORN_WORKERS=1
    GUNICORN_THREADS=2

    # Set a warning message (displayed in the login screen and the user's profile page)
    WARNING_MESSAGE={{- .Values.lifemonitor.warning_message | default "" }}

    {{- if .Values.identity_providers.github }}
    {{- if and .Values.identity_providers.github.client_id .Values.identity_providers.github.client_secret }}
    # Github OAuth2 settings
    GITHUB_CLIENT_ID="{{ .Values.identity_providers.github.client_id }}"
    GITHUB_CLIENT_SECRET="{{ .Values.identity_providers.github.client_secret }}"
    {{- end }}
    {{- end }}

    {{- if .Values.identity_providers.lsaai }}
    {{- if and .Values.identity_providers.lsaai.client_id .Values.identity_providers.lsaai.client_secret }}
    # LifeScience OAuth2 settings
    LSAAI_CLIENT_ID="{{ .Values.identity_providers.lsaai.client_id }}"
    LSAAI_CLIENT_SECRET="{{ .Values.identity_providers.lsaai.client_secret }}"
    {{- end }}
    {{- end }}

    # Set tokens for testingService
    {{- if .Values.testing_services -}}
    {{- range $k, $v := .Values.testing_services }}
    {{ $k | upper }}_TESTING_SERVICE_URL={{ $v.api_url }}
    {{ $k | upper }}_TESTING_SERVICE_TOKEN={{ $v.token }}
    {{ $k | upper }}_TESTING_SERVICE_TYPE={{ $v.type }}
    {{- end }}
    {{- end }}

    # Third-party Apps Integration
    {{- if .Values.integrations -}}
    {{- range $k, $v := .Values.integrations }}
    ENABLE_{{ $k | upper }}_INTEGRATION={{ default false $v.enabled }}
    {{ if $v.api_id }}{{ $k | upper }}_INTEGRATION_APP_ID={{ $v.api_id }}{{ end }}
    {{ if $v.client_id }}{{ $k | upper }}_INTEGRATION_CLIENT_ID={{ $v.client_id }}{{ end}}
    {{ if $v.client_secret }}{{ $k | upper }}_INTEGRATION_CLIENT_SECRET={{ $v.client_secret }}{{ end}}
    {{ if $v.web_secret }}{{ $k | upper }}_INTEGRATION_WEB_SECRET={{ $v.web_secret }}{{ end }}
    {{- if $v.private_key }}
    {{ $k | upper }}_INTEGRATION_PRIVATE_KEY_PATH="/lm/integrations/{{ $k | lower }}/{{ $v.private_key.filename }}"
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if .Values.remoteStorage.enabled -}}
    # Set configuration of the remote storage
    S3_ENDPOINT_URL={{ .Values.remoteStorage.endpoint_url }}
    S3_ACCESS_KEY={{ .Values.remoteStorage.s3_access_key }}
    S3_SECRET_KEY={{ .Values.remoteStorage.s3_secret_key }}
    S3_BUCKET={{ .Values.remoteStorage.bucket_name }}
    {{- end }}

    {{- if .Values.proxy.instances -}}
    # Set proxy entries
    {{- range $k, $v := .Values.proxy.instances }}
    PROXY_{{ $v.name | upper }}_URL={{ $v.url }}
    {{- end }}
    {{- end }}