# Set the Flask environment: production|development
#FLASK_ENV=development # set to 'production' by default

# Set the LOG_LEVEL
# LOG_LEVEL=INFO # default: 'INFO' on production, 'DEBUG' on development

# The name and port number of the back-end server (e.g., 'localhost:8000').
# If the back-end is served through a reverse proxy,
# then you have to set SERVER_NAME to the appropriate proxy entry
# which points to the back-end (e.g., localhost:8443).
# The SERVER_NAME property is also used to build the links returned by the API
# when the EXTERNAL_SERVER_URL is not configured
#SERVER_NAME=localhost:8000

# The name and port number of the server (e.g.: 'lm.local:8000'),
# used as base_url on all the links returned by the API
#EXTERNAL_SERVER_URL=https://lifemonitor.eu

# Normally, OAuthLib will raise an InsecureTransportError if you attempt to use OAuth2 over HTTP,
# rather than HTTPS. Setting this environment variable will prevent this error from being raised.
# This is mostly useful for local testing, or automated tests. Never set this variable in production.
#AUTHLIB_INSECURE_TRANSPORT = True

# Uncomment to use an additional config file to configure your LifeMonitor instance.
# Variables defined here will override those in the default configuration.
# The path should be absolute or relative to the instance folder
#FLASK_APP_CONFIG_FILE=config.py
# Uncomment to override the default instance path folder. Only absolute paths are allowed.
# FLASK_APP_INSTANCE_PATH=/home/lm/config_instance

# Set a warning message (displayed in the login screen and the user's profile page)
#WARNING_MESSAGE="Hi, there!"

# Set admin credentials
LIFEMONITOR_ADMIN_PASSWORD=admin

# PostgreSQL DBMS settings
#POSTGRESQL_HOST=0.0.0.0
POSTGRESQL_PORT=5432
POSTGRESQL_DATABASE=lm
POSTGRESQL_USERNAME=lm
POSTGRESQL_PASSWORD=foobar

# Gunicorn settings
GUNICORN_WORKERS=1
GUNICORN_THREADS=2

# Redis settings
REDIS_PASSWORD=foobar
REDIS_PORT_NUMBER=6379

# Github OAuth2 settings
#GITHUB_CLIENT_ID="___YOUR_GITHUB_OAUTH2_CLIENT_ID___"
#GITHUB_CLIENT_SECRET="___YOUR_GITHUB_OAUTH2_CLIENT_SECRET___"

# Set access tokens for testing services.
# Associate the access token <SERVICE_ACCESS_TOKEN> to the testing service
# available at <SERVICE_URL> by setting a pair of config variables like:
#     <SERVICE_LABEL>_TESTING_SERVICE_URL=<SERVICE_URL>
#     <SERVICE_LABEL>_TESTING_SERVICE_TOKEN=<SERVICE_ACCESS_TOKEN>
#
# Notice that the prefix of <SERVICE_LABEL> (i.e., the substring before the first '_') 
# identifies the SERVICE_TYPE (e.g., TRAVIS, JENKINS, etc.). See examples below.
#
# 'travis.org' service
#TRAVIS_ORG_TESTING_SERVICE_URL=https://api.travis-ci.org
#TRAVIS_ORG_TESTING_SERVICE_TOKEN=<YOUR_TOKEN>
#
# 'travis.com' service
#TRAVIS_COM_TESTING_SERVICE_URL=https://api.travis-ci.com
#TRAVIS_COM_TESTING_SERVICE_TOKEN=<YOUR_TOKEN>