# Set the Flask environment: production|development ('production' by default)
FLASK_ENV=development

# Set the LOG_LEVEL
LOG_LEVEL=INFO # default: 'INFO' on production, 'DEBUG' on development

# The name and port number of the back-end server (e.g., 'localhost:8000').
# If the back-end is served through a reverse proxy,
# then you have to set SERVER_NAME to the appropriate proxy entry
# which points to the back-end (e.g., localhost:8443).
# The SERVER_NAME property is also used to build the links returned by the API
# when the EXTERNAL_SERVER_URL is not configured
#SERVER_NAME=localhost:8000

# The name and port number of the server (e.g.: 'lm.local:8000'),
# used as base_url on all the links returned by the API
#EXTERNAL_SERVER_URL=https://lifemonitor.eu

# Base URL of the LifeMonitor web app associated with this back-end instance
WEBAPP_URL=https://app.lifemonitor.eu

# Normally, OAuthLib will raise an InsecureTransportError if you attempt to use OAuth2 over HTTP,
# rather than HTTPS. Setting this environment variable will prevent this error from being raised.
# This is mostly useful for local testing, or automated tests. Never set this variable in production.
#AUTHLIB_INSECURE_TRANSPORT = True

# Uncomment to use an additional config file to configure your LifeMonitor instance.
# Variables defined here will override those in the default configuration.
# The path should be absolute or relative to the instance folder
#FLASK_APP_CONFIG_FILE=config.py
# Uncomment to override the default instance path folder. Only absolute paths are allowed.
# FLASK_APP_INSTANCE_PATH=/home/lm/config_instance

# Set a warning message (displayed in the login screen and the user's profile page)
#WARNING_MESSAGE="Hi, there!"

# Enable Github App
ENABLE_GITHUB_INTEGRATION=True

# Enable Github App settings
ENABLE_REGISTRY_INTEGRATION=True

# Set admin credentials
LIFEMONITOR_ADMIN_PASSWORD=admin

# PostgreSQL DBMS settings
POSTGRESQL_HOST=db
POSTGRESQL_PORT=5432
POSTGRESQL_DATABASE=lm
POSTGRESQL_USERNAME=lm
POSTGRESQL_PASSWORD=foobar

# Gunicorn settings
GUNICORN_WORKERS=1
GUNICORN_THREADS=2

# Dramatiq worker settings
WORKER_PROCESSES=1
WORKER_THREADS=3

# Redis settings
REDIS_HOST=redis
REDIS_PASSWORD=foobar
REDIS_PORT_NUMBER=6379

# Email settings
MAIL_SERVER=''
MAIL_PORT=465
MAIL_USERNAME=''
MAIL_PASSWORD=''
MAIL_USE_TLS=False
MAIL_USE_SSL=True
MAIL_DEFAULT_SENDER=''

# Storage path of workflow RO-Crates
DATA_WORKFLOWS = "/var/data/lm"

# Cache settings
CACHE_REDIS_DB=0
CACHE_DEFAULT_TIMEOUT=300
CACHE_REQUEST_TIMEOUT=15
CACHE_SESSION_TIMEOUT=3600
CACHE_WORKFLOW_TIMEOUT=1800

# S3 STORAGE
# S3_ENDPOINT_URL='https://a3s.fi'
# S3_ACCESS_KEY=<YOUR_S3_ACCESS_KEY>
# S3_SECRET_KEY=<YOUR_S3_ACCESS_SECRET>
# S3_BUCKET=lifemonitor-bucket

# Backup settings
BACKUP_LOCAL_PATH="./backups"
BACKUP_RETAIN_DAYS=30
# BACKUP_REMOTE_PATH="lm-backups"
# BACKUP_REMOTE_HOST="ftp-site.domain.it"
# BACKUP_REMOTE_USER="lm"
# BACKUP_REMOTE_PASSWORD="foobar"
# BACKUP_REMOTE_ENABLE_TLS=True

# Github OAuth2 settings
#GITHUB_CLIENT_ID="___YOUR_GITHUB_OAUTH2_CLIENT_ID___"
#GITHUB_CLIENT_SECRET="___YOUR_GITHUB_OAUTH2_CLIENT_SECRET___"

# LifeScience OAuth2 settings
#LSAAI_CLIENT_ID="___YOUR_LSAAI_OAUTH2_CLIENT_ID___"
#LSAAI_CLIENT_SECRET="___YOUR_LSAAI_OAUTH2_CLIENT_SECRET___"

# Set access tokens for testing services.
# Associate the access token <SERVICE_ACCESS_TOKEN> to the testing service
# available at <SERVICE_URL> by setting the following config variables:
#     <SERVICE_LABEL>_TESTING_SERVICE_URL=<SERVICE_URL>
#     <SERVICE_LABEL>_TESTING_SERVICE_TOKEN=<SERVICE_ACCESS_TOKEN>
#     <SERVICE_LABEL>_TESTING_SERVICE_TYPE=[github,jenkins,travis]
#
# 'travis.org' service
#SERVICE_ONE_TESTING_SERVICE_URL=https://api.travis-ci.org
#SERVICE_ONE_TESTING_SERVICE_TOKEN=<YOUR_TOKEN>
#SERVICE_ONE_TESTING_SERVICE_TYPE=travis
#
# 'travis.com' service
#SERVICE_TWO_TESTING_SERVICE_URL=https://api.travis-ci.com
#SERVICE_TWO_TESTING_SERVICE_TOKEN=<YOUR_TOKEN>
#SERVICE_TWO_TESTING_SERVICE_TYPE=travis

# GitHub App Integration
# GITHUB_INTEGRATION_APP_ID = 
# GITHUB_INTEGRATION_CLIENT_ID = 
# GITHUB_INTEGRATION_CLIENT_SECRET =
# GITHUB_INTEGRATION_SERVICE_TOKEN =
# GITHUB_INTEGRATION_SERVICE_REPOSITORY =
# GITHUB_INTEGRATION_WEB_SECRET =
# GITHUB_INTEGRATION_PRIVATE_KEY_PATH =

# Set GITHUB_INTEGRATION_EVENTS_CHANNEL to receive webhook payloads 
# from GitHub through a smee.io channel, without exposing your machine
# when the LifeMonitor service is deployed in 'dev' mode by means of docker-compose.
# If not set, a new channel will be automatically created. To find out the channel in use
# check the logs of the smee.io service container:
#
# ``` docker compose logs -f github_event_proxy ```
#
# GITHUB_INTEGRATION_EVENTS_CHANNEL=<YOUR_SMEE.IO_CHANNEL>

# Configure entries to enable forwarding of GitHub push notifications
# to other LifeMonitor instances. LifeMonitor instances can specified by setting 
# a variable like: PROXY_<INSTANCE_NAME>_URL = <API_INSTANCE_URL>
# e.g., PROXY_PRODUCTION_URL = https://api.lifemonitor.eu
#
# PROXY_PRODUCTION_URL = https://api.lifemonitor.eu
# PROXY_DEVELOPMENT_URL = https://api.dev.lifemonitor.eu