# vim: set et sw=2

openapi: "3.0.0"

info:
  version: "0.11.3"
  title: "Life Monitor API"
  description: |
    *Workflow sustainability service*

    Life Monitor aims to facilitate the sharing, execution and monitoring of
    workflow tests over time, ensuring that deviations from the workflow's
    correct operation are detected and communicated to the workflow authors so
    that they might be solved, thus extending the useful life of the workflow.

    Life Monitor is being developed as part of the [EOSC-Life project](https://www.eosc-life.eu/).

servers:
  - url: /
    description: >
      Version 0.11.3 of API.

tags:
  - name: GitHub Integration
    description: Resources related to the GitHub integration
  - name: Users
    description: Operations related to users
  - name: Workflows
    description: Operations related to workflows
  - name: Test Suites
    description: Operations related to test suites
  - name: Test Instances
    description: Operations related to test instances
  - name: Registries
    description: Operations related to workflow registries (e.g., WorkflowHub)
  - name: Registry Client Operations
    description: Operations reserved to registry clients

paths:
  /integrations/github/config/schema.json:
    get:
      tags: ["GitHub Integration"]
      x-openapi-router-controller: lifemonitor.schemas.controller
      operationId: "lifemonitor_json"
      summary: "JSON Schema for the .lifemonitor.json configuration file"
      description: "Return the JSON Schema for the `.lifemonitor.json` configuration file"
      responses:
        "200":
          description: The JSON schema for the `.lifemonitor.json` configuration file
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /integrations/github/config/validate:
    post:
      tags: ["GitHub Integration"]
      x-openapi-router-controller: lifemonitor.schemas.controller
      operationId: "validate"
      summary: "Validate config file"
      description: |
        Validate an instance of `.lifemonitor.yaml` configuration file 
        against the schema
        [/integrations/github/config/schema.json](/integrations/github/config/schema.json).
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              description: A YAML configuration file
              type: string
              format: binary
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: |
                      `true` if the config file is valid; 
                      `false` if the file is not valid
                oneOf:
                  - properties:
                      data:
                        type: object
                        description: Validated configuration, complete with default values.
                    required:
                      - data
                  - properties:
                      message:
                        type: string
                        description: A short error message
                      error:
                        type: string
                        description: Detailed error description
                    required:
                      - message
                      - error

                required:
                  - valid
        "400":
          $ref: "#/components/responses/BadRequest"

  /registries:
    get:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflow_registries_get"
      summary: "List registries"
      description: "List all known workflow registries"
      responses:
        "200":
          description: List of workflow registries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfRegistries"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/{registry_uuid}:
    get:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflow_registries_get_by_uuid"
      summary: "Get a registry"
      description: "Get information about the specified workflow registry"
      parameters:
        - $ref: "#/components/parameters/registry_uuid"
      responses:
        "200":
          description: Workflow registry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Registry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/{registry_uuid}/index:
    get:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_index"
      summary: "Get registry index"
      description: "Get the index of workflows available on the registry"
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.read"]
        - RegistryCodeFlow: ["user.workflow.read"]
        - AuthorizationCodeFlow: ["user.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/registry_uuid"
      responses:
        "200":
          description: List of workflows on the registry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfRegistryWorkflows"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/{registry_uuid}/index/{registry_workflow_identifier}:
    get:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_index_workflow"
      summary: "Get registry index workflow"
      description: "Get information about the specified workflow of the registry index"
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.read"]
        - RegistryCodeFlow: ["user.workflow.read"]
        - AuthorizationCodeFlow: ["user.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/registry_uuid"
        - $ref: "#/components/parameters/registry_workflow_identifier"
      responses:
        "200":
          description: List of workflows on the registry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistryWorkflow"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/current:
    get:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "show_current_user_profile"
      summary: Get the current user
      description: |
        Get information about the current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.profile"]
        - RegistryCodeFlow: ["user.profile"]
        - AuthorizationCodeFlow: ["user.profile"]
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/current/notifications:
    get:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "user_notifications_get"
      summary: List notifications for the current user
      description: |
        List all notifications for the current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.profile"]
        - RegistryCodeFlow: ["user.profile"]
        - AuthorizationCodeFlow: ["user.profile"]
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfNotifications"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "user_notifications_put"
      summary: Mark as read notifications for the current user
      description: |
        Mark as read notifications for the current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.profile"]
        - RegistryCodeFlow: ["user.profile"]
        - AuthorizationCodeFlow: ["user.profile"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListOfNotifications"
      responses:
        "204":
          description: "Notifications updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    patch:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "user_notifications_patch"
      summary: Delete notifications for the current user
      description: |
        Delete notifications for the current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.profile"]
        - RegistryCodeFlow: ["user.profile"]
        - AuthorizationCodeFlow: ["user.profile"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: List of UUIDs
              type: array
              items:
                type: string
                example: "21ac72ec-b9a5-49e0-b5a6-1322b8b54552"
      responses:
        "204":
          description: "Notifications updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/current/notifications/{notification_uuid}:
    delete:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "user_notifications_delete"
      summary: Delete notification for the current user
      description: |
        Delete notification for the current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.profile"]
        - RegistryCodeFlow: ["user.profile"]
        - AuthorizationCodeFlow: ["user.profile"]
      parameters:
        - $ref: "#/components/parameters/notification_uuid"
      responses:
        "204":
          description: "Notifications updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/current:
    get:
      tags: ["Registry Client Operations"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflow_registries_get_current"
      summary: "Get the current registry client"
      description: |
        Get information about the current workflow registry client

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      security:
        - RegistryClientCredentials: ["registry.info"]
        - RegistryCodeFlow: ["registry.info"]
      responses:
        "200":
          description: Current workflow registry client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Registry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/current/users:
    get:
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "get_registry_users"
      summary: "List users"
      description: |
        List all users of the current workflow registry client who have linked
        their registry account to their LifeMonitor identity.

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      tags: ["Registry Client Operations"]
      security:
        - RegistryClientCredentials: ["registry.user"]
        - RegistryCodeFlow: ["registry.user"]
      responses:
        "200":
          description: List of users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfUsers"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /registries/current/workflows:
    get:
      tags: ["Registry Client Operations"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_workflows_get"
      summary: List workflows
      description: |
        List all workflows in the current registry that have been registered with LifeMonitor.

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      security:
        - RegistryClientCredentials: ["registry.workflow.read"]
        - RegistryCodeFlow: ["registry.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/wf_versions"
        - $ref: "#/components/parameters/wf_status"
      responses:
        "200":
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfWorkflow"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags: ["Registry Client Operations"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_workflows_post"
      summary: "Submit workflow"
      description: |
        Submit (a new version of) a workflow indexed by the current registry client.

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      security:
        - RegistryClientCredentials: ["registry.workflow.write"]
        - RegistryCodeFlow: ["registry.workflow.write"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RoCrateWorkflowVersion"
                - $ref: "#/components/schemas/RoCrateLinkWorkflowVersion"
                - $ref: "#/components/schemas/RegistryWorkflowVersion"
      responses:
        "201":
          $ref: "#/components/responses/WorkflowRegistered"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"

  /registries/{registry_uuid}/workflows:
    get:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_registry_workflows_get"
      summary: List registry workflows
      description: |
        List workflows from the specified registry that have been submitted to
        LifeMonitor by the current (authenticated) user.
      security:
        - apiKey: ["user.workflow.read"]
        - AuthorizationCodeFlow: ["user.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/registry_uuid"
        - $ref: "#/components/parameters/wf_versions"
        - $ref: "#/components/parameters/wf_status"
      responses:
        "200":
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfWorkflow"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: ["Registries"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_registry_workflows_post"
      summary: "Submit registry workflow"
      description: |
        Submit (a new version of) a workflow indexed on the specified registry as the
        current (authenticated) user
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.write"]
        - AuthorizationCodeFlow: ["user.workflow.write"]
      parameters:
        - $ref: "#/components/parameters/registry_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistryWorkflowVersion"
      responses:
        "201":
          $ref: "#/components/responses/WorkflowRegistered"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"

  /users/{user_id}/workflows:
    get:
      tags: ["Registry Client Operations"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_user_workflows_get"
      summary: List workflows for a user
      description: |
        List registry workflows registered on LifeMonitor by the specified registry user.

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      security:
        - RegistryClientCredentials: ["registry.user.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/wf_versions"
        - $ref: "#/components/parameters/wf_status"
      responses:
        "200":
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfWorkflow"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: ["Registry Client Operations"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "registry_user_workflows_post"
      summary: "Submit workflow for a user"
      description: |
        Submit (a new version of) a workflow indexed by the current registry client for the specified registry user

        **Note:** only workflow registries interacting with LifeMonitor as
        OAuth2 clients can use this endpoint.
      security:
        - RegistryClientCredentials: ["registry.user.workflow.write"]
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RoCrateWorkflowVersion"
                - $ref: "#/components/schemas/RoCrateLinkWorkflowVersion"
                - $ref: "#/components/schemas/RegistryWorkflowVersion"
      responses:
        "201":
          $ref: "#/components/responses/WorkflowRegistered"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"

  /users/current/workflows:
    get:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_workflows_get"
      summary: "List workflows for the current user"
      description: |
        List all workflows submitted or subscribed by the current user
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.read"]
        - RegistryCodeFlow: ["user.workflow.read"]
        - AuthorizationCodeFlow: ["user.workflow.read"]
      parameters:
        - $ref: "#/components/parameters/wf_status"
        - $ref: "#/components/parameters/wf_versions"
        - $ref: "#/components/parameters/wf_subscriptions"
      responses:
        "200":
          description: A list of Workflows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfWorkflow"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_workflows_post"
      summary: "Submit workflow as the current user"
      description: |
        Submit (a new version of) a workflow.
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.write"]
        - AuthorizationCodeFlow: ["user.workflow.write"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RoCrateLinkWorkflowVersion"
                - $ref: "#/components/schemas/RoCrateWorkflowVersion"
      responses:
        "201":
          $ref: "#/components/responses/WorkflowRegistered"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"

  /users/current/subscriptions:
    get:
      tags: ["Users"]
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "user_subscriptions_get"
      summary: "List subscriptions for the current user"
      description: |
        List all subscriptions for the current user
      security:
        - cookieAuth: []
        - apiKey: ["user.workflow.read"]
        - RegistryCodeFlow: ["user.workflow.read"]
        - AuthorizationCodeFlow: ["user.workflow.read"]
      responses:
        "200":
          description: A list of subscriptions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfSubscriptions"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /workflows:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get"
      summary: "List workflows"
      tags: ["Workflows"]
      description: |
        List all workflows either public or registered by the current (authenticated) user or registry client.
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_status"
        - $ref: "#/components/parameters/wf_versions"
        - $ref: "#/components/parameters/wf_subscriptions"
      responses:
        "200":
          description: List of Workflows
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfWorkflow"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /workflows/issues:
    get:
      summary: List issue types
      description: "Get information about the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_issue_types"
      tags: ["Workflows"]
      security:
        - {}
      responses:
        "200":
          description: >
            List of issue types.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfIssues"

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/issues.html:
    get:
      summary: List issue types
      description: "Get information about the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_issue_types_as_html"
      tags: ["Workflows"]
      security:
        - {}
      parameters:
        - $ref: "#/components/parameters/back"
      responses:
        "200":
          description: >
            List of issue types.
          content:
            text/html:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}:
    get:
      summary: Get a workflow
      description: "Get information about the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_latest_version_by_id"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/previous_versions"
        - $ref: "#/components/parameters/rocrate_specs"
      responses:
        "200":
          description: >
            A Workflow object for the latest version of the specified workflow
            and extended with the list of previous versions that are registered.
            Information about the previous versions can also be retrieved through the
            `/workflows/{wf_uuid}/versions` resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a workflow
      description: "Update basic information of the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_put"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowBase"
      responses:
        "204":
          description: "Workflow updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_delete"
      summary: "Delete a workflow"
      description: "Delete the specified workflow and all its versions"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      responses:
        "204":
          description: Deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/subscribe:
    post:
      summary: Subscribe user to a workflow
      description: "Subscribe the current (authenticated) user to the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_workflow_subscribe"
      tags: ["Users"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      responses:
        "201":
          description: "Subscription registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Subscribe user to workflow events
      description: "Subscribe the current (authenticated) user to a list of events for the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_workflow_subscribe_events"
      tags: ["Users"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListOfEvents"
      responses:
        "201":
          description: "Subscription to events created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "204":
          description: "Subscription updated with events"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/unsubscribe:
    post:
      summary: Unsubscribe user from a workflow
      description: "Unsubscribe the current (authenticated) user from the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "user_workflow_unsubscribe"
      tags: ["Users"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      responses:
        "204":
          description: "Subscription deleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/versions:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_versions_by_id"
      summary: "List workflow versions"
      description: "List all versions of the specified workflow"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
      responses:
        "200":
          description: A WorkflowVersion object
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      versions:
                        readOnly: true
                        type: array
                        items:
                          $ref: "#/components/schemas/WorkflowVersion"
                        example:
                          [
                            {
                              uuid: "21ac72ec-b9a5-49e0-b5a6-1322b8b54552",
                              version: "1.0",
                              ro_crate:
                                {
                                  links:
                                    {
                                      origin: "https://dev.workflowhub.eu/workflows/142/content_blobs/240/download",
                                      download: "https://api.lifemonitor.eu/ro_crates/10/download",
                                    },
                                },
                              is_latest: false,
                              submitter: { id: 501, username: "lm" },
                            },
                          ]
                      workflow:
                        $ref: "#/components/schemas/Workflow"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/versions/{wf_version}:
    get:
      summary: Get a workflow version
      description: "Get information of the specified workflow version"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_version_by_id"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/wf_version"
        - $ref: "#/components/parameters/rocrate_specs"
      responses:
        "200":
          description: >
            A Workflow object for the version of the specified workflow.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowVersionDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a workflow version
      description: "Update basic information of the specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_version_put"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/wf_version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: "#/components/schemas/RoCrateWorkflowVersionBase"
                - $ref: "#/components/schemas/RoCrateLinkWorkflowVersionBase"
                - $ref: "#/components/schemas/WorkflowVersionBase"
      responses:
        "204":
          description: "Workflow version updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_delete_version"
      summary: "Delete a workflow version"
      description: "Delete the specified version of the specified workflow"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/wf_version"
      responses:
        "204":
          description: Deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/status:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_status"
      summary: "Get workflow test status"
      description: "Get the test status for the specified workflow and workflow version"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/version"
      responses:
        "200":
          description: Test status for the specified version of the workflow
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowVersionStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/rocrate/{wf_version}/metadata:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_rocrate_metadata"
      summary: "Get workflow RO-Crate metadata"
      description: "Get the RO-Crate JSON metadata for the specified workflow and workflow version"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/wf_version"
      responses:
        "200":
          description: |
            RO-Crate JSON metadata for the specified workflow and workflow version.
            RO-Crate specifcation is available at https://www.researchobject.org/ro-crate/.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{wf_uuid}/rocrate/{wf_version}/download:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_rocrate_download"
      summary: "Get workflow RO-Crate archive"
      description: "Get the RO-Crate ZIP archive for the specified workflow and workflow version"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/wf_version"
      responses:
        "200":
          description: RO-Crate ZIP archive for the specified workflow and workflow version
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /workflows/{wf_uuid}/suites:
    get:
      summary: "List workflow test suites"
      description: >
        List all test suites associated with the specified workflow. Test suites
        are collected from the RO-crate received with the submission of (a new
        version of) a workflow.
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_suites"
      tags: ["Workflows"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/wf_uuid"
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/suite_status"
        - $ref: "#/components/parameters/suite_latest_builds"
      responses:
        "200":
          description: List of test suites associated with the specified workflow and workflow version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfTestSuite"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /suites/{suite_uuid}:
    get:
      summary: "Get a test suite"
      description: "Get information about the specified test suite."
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_get_by_uuid"
      tags: ["Test Suites"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/suite_uuid"
        - $ref: "#/components/parameters/suite_status"
        - $ref: "#/components/parameters/suite_latest_builds"
      responses:
        "200":
          description: TestSuite object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuite"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a test suite
      description: "Update basic information of the specified suite"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_put"
      tags: ["Test Suites"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/suite_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the test suite.
                  example: Workflow Test Suite
      responses:
        "204":
          description: "Suite updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /suites/{suite_uuid}/status:
    get:
      summary: "Get test suite status"
      description: "Get the status of the latest build for each instance of the specified test suite"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_get_status"
      tags: ["Test Suites"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/suite_uuid"
      responses:
        "200":
          description: TestSuiteStatus object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuiteStatus"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /suites/{suite_uuid}/instances:
    get:
      summary: "List test instances for a suite"
      description: "List all instances of the specified test suite"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_get_instances"
      tags: ["Test Suites"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/suite_uuid"
      responses:
        "200":
          description: "List of test instances for this test suite"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfTestInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: "Submit a test instance for a suite"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_post_instance"
      tags: ["Test Suites"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
      description: |
        Submit a new test instance for the specified test suite.

        There are two main types of test instances:

        1. **"managed"** (not supported yet): directly managed by LifeMonitor
        2. **"unmanaged"**: hosted on an external testing service and monitored
        by LifeMonitor (LifeMonitor retrieves information on the test status
        through the service's API).
      parameters:
        - $ref: "#/components/parameters/suite_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestInstance"
              # at the moment we can distiguish between managed and unmanaged
              # through the "managed" property.
              #
              # oneOf:
              #   - $ref: "#/components/schemas/TestInstance"
              #   - $ref: "#/components/schemas/ManagedTestInstanceCreationData"
              # discriminator:
              #   propertyName: discriminatorProperty
              #   mapping:
              #     valueA: "#/components/schemas/TestInstance"
              #     valueB: "#/components/schemas/ManagedTestInstanceCreationData"
      responses:
        "201":
          $ref: "#/components/responses/TestInstanceRegistered"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "501":
          description: "Not implemented"

  /instances/{instance_uuid}:
    get:
      summary: "Get a test instance"
      description: "Get information about the specified test instance"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "instances_get_by_id"
      tags: ["Test Instances"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/instance_uuid"
      responses:
        "200":
          description: "A test instance object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestInstance"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a test instance
      description: "Update basic information of the specified test instance"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "instances_put"
      tags: ["Test Instances"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/instance_uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the test instance.
                  example: Workflow Test Instance
      responses:
        "204":
          description: "Test instance updated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "instances_delete_by_id"
      summary: "Delete a test instance"
      description: "Delete the specified test instance"
      tags: ["Test Instances"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.write"]
        - RegistryClientCredentials: ["workflow.write"]
        - RegistryCodeFlow: ["workflow.write"]
        - AuthorizationCodeFlow: ["workflow.write"]
      parameters:
        - $ref: "#/components/parameters/instance_uuid"
      responses:
        "204":
          description: Deleted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /instances/{instance_uuid}/latest-builds:
    get:
      summary: "Get the latest test instance builds"
      description: "Get information on the latest builds for the specified test instance"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "instances_get_builds"
      tags: ["Test Instances"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/instance_uuid"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: "A list of test instance objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfBuildSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /instances/{instance_uuid}/builds/{build_id}:
    get:
      summary: "Get a test instance build"
      description: "Get information on the specified build on the specified test instance"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "instances_builds_get_by_id"
      tags: ["Test Instances"]
      security:
        - cookieAuth: []
        - apiKey: ["workflow.read"]
        - RegistryClientCredentials: ["workflow.read"]
        - RegistryCodeFlow: ["workflow.read"]
        - AuthorizationCodeFlow: ["workflow.read"]
        - {}
      parameters:
        - $ref: "#/components/parameters/instance_uuid"
        - $ref: "#/components/parameters/build_id"
      responses:
        "200":
          description: "A build summary object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuildSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    registry_uuid:
      name: "registry_uuid"
      description: |
        Universal unique identifier of the workflow registry.

        (provided by the endpoint [`[GET] /registries`](#get-/registries))
      in: path
      schema:
        type: string
      required: true
      example: aa16c6a9-571f-4a62-976f-60ea514ad2c1
    registry_workflow_identifier:
      name: "registry_workflow_identifier"
      description: "Identifier of the workflow on the registry"
      in: path
      schema:
        type: string
      required: true
      example: 123e4567-e89b-12d3-a456-426614174000
    user_id:
      name: "user_id"
      description: "Registry user's identifier"
      in: path
      schema:
        type: string
      required: true
      example: 501
    wf_uuid:
      name: "wf_uuid"
      description: "Universal unique identifier of the workflow"
      in: path
      schema:
        type: string
      required: true
      example: 123e4567-e89b-12d3-a456-426614174000
    wf_version:
      name: "wf_version"
      description: "Workflow version"
      in: path
      schema:
        type: string
      required: true
      example: "1.0"
    wf_status:
      name: "status"
      in: query
      schema:
        type: boolean
      description: |
        `true` to include a summary of the workflow status
      example: "false"
    wf_versions:
      name: "versions"
      in: query
      schema:
        type: boolean
      description: |
        `true` to include the list of versions of each workflow
      example: "false"
    wf_subscriptions:
      name: "subscriptions"
      in: query
      schema:
        type: boolean
      description: |
        `true` to include subscribed workflows
      example: "false"
    version:
      name: "version"
      in: query
      schema:
        type: string
        default: latest
      description: "Workflow version"
      example: "1.0"
    download:
      name: "download"
      in: query
      schema:
        type: boolean
        default: false
      description: "Enable download"
      example: "true"
    previous_versions:
      name: "previous_versions"
      in: query
      schema:
        type: boolean
        default: false
      description: "`true` to include all versions of a workflow"
      example: "true"
    rocrate_specs:
      name: "ro_crate"
      in: query
      schema:
        type: boolean
        default: false
      description: |
        `true` to include the RO-Crate metadata of the workflow
      example: "false"
    suite_uuid:
      name: "suite_uuid"
      description: "Universal unique identifier of the test suite"
      in: path
      schema:
        type: string
      required: true
      example: e3208b02-69b6-4e32-a3dc-b93967d30e2c
    suite_status:
      name: "status"
      in: query
      schema:
        type: boolean
        default: false
      description: |
        `true` to include the suite status
      example: "false"
    suite_latest_builds:
      name: "latest_builds"
      in: query
      schema:
        type: boolean
        default: false
      description: |
        `true` to include the latest builds which contribute to the suite status
      example: "false"
    instance_uuid:
      name: "instance_uuid"
      description: "Universal unique identifier of the test instance"
      in: path
      schema:
        type: string
      required: true
      example: ba5bbdc3-d9fb-4381-a1d8-96a8ac5594d7
    build_id:
      name: "build_id"
      description: "Build identifier"
      in: path
      schema:
        type: string
      required: true
      example: 167444
    limit:
      name: "limit"
      in: query
      schema:
        type: integer
        minimum: 1
        default: 10
      description: "Maximum number of items to retrieve"
    notification_uuid:
      name: "notification_uuid"
      description: "Universal unique identifier of the user notification"
      in: path
      schema:
        type: string
      required: true
      example: 123e4567-e89b-12d3-a456-426614174000
    format:
      name: "format"
      in: query
      schema:
        type: string
        enum: [json, html]
      # default: 'json' # not supported yet
      description: |
        `json` to get a JSON object; 
        'html' to render the list of issues on a formatted HTML page
      example: "html"
    back:
      name: "back"
      in: query
      schema:
        type: string
      description: |
        A callback URL
      example: "https://lifemonitor.eu"

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: Conflict with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    BadRequest:
      description: The request is malformed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    WorkflowRegistered:
      description: A new workflow has been registered.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Workflow"

    TestInstanceRegistered:
      description: A new test instance has been registered.
      content:
        application/json:
          schema:
            type: object
            properties:
              uuid:
                type: string
                description: |
                  Universal unique identifier of the test instance
                readOnly: true
                example: ba5bbdc3-d9fb-4381-a1d8-96a8ac5594d7

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: An identifier for the user, unique among all LifeMonitor accounts and never reused
          example: 501
        username:
          type: string
          description: The user's login name, unique among all LifeMonitor accounts
          example: lm
      required:
        - id
        - username

    UserProfile:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            identities:
              type: object
              description: |
                A dict of `<provider_name>:<UserIdentity>` items.
              additionalProperties:
                $ref: "#/components/schemas/UserIdentity"
              example:
                "seek":
                  {
                    "sub": 1,
                    "username": "lm",
                    "provider":
                      {
                        "type": "seek",
                        "name": "workflowhub",
                        "uri": "https://workflowhub.eu/",
                      },
                  }

    UserIdentity:
      type: object
      description: A user identity issued by an identity provider.
      properties:
        sub:
          type: string
          description: An identifier for the user, unique among all provider accounts and never reused
          example: 1
        username:
          type: string
          nullable: true
          description: "User's login name"
          example: jdoe
        name:
          type: string
          nullable: true
          description: "User's first and family name, if available"
          example: "John Doe"
        email:
          type: string
          nullable: true
          description: "User's email"
          example: jdoe@example.com
        picture:
          type: string
          nullable: true
          description: "User's picture (URI)"
          example: http://example.com/some_picture.jpg
        profile:
          type: string
          nullable: true
        provider:
          $ref: "#/components/schemas/IdentityProvider"
      required:
        - sub
        - provider

    Author:
      type: object
      description: A creator/author of the workflow
      properties:
        name:
          type: string
          nullable: false
          description: "Author's first and family name, if available"
          example: "Josiah Carberry"
        url:
          type: string
          nullable: true
          description: "A link to the author's page"
          example: https://orcid.org/0000-0002-1825-0097
      required:
        - name

    Subscription:
      type: object
      description: A user subscription for a given resource (e.g., workflow).
      properties:
        user:
          $ref: "#/components/schemas/User"
        resource:
          type: object
          description: "Resource"
          properties:
            uuid:
              type: string
              nullable: false
              description: "Resource UUID"
              example: 550e8400-e29b-41d4-a716-446655440000
            type:
              type: string
              nullable: false
              description: "Type of the resource"
              example: workflow
        created:
          type: string
          description: |
            A timestamp for the creation time of the subscription
          example: 1616427012.0
        modified:
          type: string
          description: |
            A timestamp for the modification time of the subscription
          example: 1616427512.0
        events:
          $ref: "#/components/schemas/ListOfEvents"
      required:
        - user
        - resource
        - created
        - modified
        - events

    Issue:
      type: object
      description: A user subscription for a given resource (e.g., workflow).
      properties:
        name:
          type: string
          nullable: false
          description: "Name of the issue type"
          example: Missing workflow file
        identifier:
          type: string
          nullable: false
          description: "Identifier of the issue type in 'snake case' format"
          example: "missing_workflow_file"
        description:
          type: string
          nullable: true
          description: "A description for the issue type"
          example: "No workflow found on this repository."
        depends_on:
          type: array
          nullable: true
          description: "List of identifiers of issues which the issue depends on"
          items:
            type: string
          example: ["missing_configuration_file"]
        labels:
          type: array
          nullable: true
          description: "List of labels for the issue type"
          items:
            type: string
          example: ["bug", "enhancement"]
      required:
        - identifier
        - name

    ListOfIssues:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Issue"
      description: |
        List of issue types
      required:
        - items

    EventType:
      type: string
      enum:
        - ALL
        - BUILD_FAILED
        - BUILD_RECOVERED

    ListOfEvents:
      type: array
      items:
        $ref: "#/components/schemas/EventType"
      description: |
        List of events related to the specified workflow
      example: ["all"]

    ListOfSubscriptions:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
      required:
        - items

    Notification:
      type: object
      description: A notification for the current user.
      properties:
        uuid:
          type: string
          description: Universal unique identifier of notification
          example: aa16c6a9-571f-4a62-976f-60ea514ad2c1
        data:
          type: object
          description: "Notification payload"
          readOnly: true
        created:
          type: string
          description: |
            A timestamp for the creation time of the notification
          example: 1616427012.0
          readOnly: true
        read:
          type: string
          description: |
            A timestamp for the read time of the notification
          example: 1616427012.0
        emailed:
          type: string
          description: |
            A timestamp for the time when the email was sent
          example: 1616427012.0
          readOnly: true
      required:
        - uuid
        - created

    ListOfNotifications:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
      required:
        - items

    IdentityProviderType:
      type: string
      enum:
        - "registry"
        - "oauth2_identity_provider"

    IdentityProvider:
      type: object
      properties:
        type:
          type: string
          $ref: "#/components/schemas/IdentityProviderType"
          description: Type of identity provider
          example: registry
        name:
          type: string
          description: |
            The name assigned to the identity provider when registered on LifeMonitor
          example: workflowhub
        uri:
          type: string
          description: The URI of the identity provider
          example: https://workflowhub.eu/
        userinfo_endpoint:
          type: string
          description: URI of the API endpoint to get the user profile from the identity provider
      required:
        - name
        - type
        - uri

    ListOfUsers:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - items

    RegistryType:
      type: string
      description: "Supported registry types"
      enum:
        - "seek"

    Registry:
      type: object
      description: Workflow registry
      properties:
        uuid:
          type: string
          description: Universal unique identifier of the workflow registry
          example: aa16c6a9-571f-4a62-976f-60ea514ad2c1
        identifier:
          type: string
          description: |
            An alphanumeric string used to denote the registry.
            Only `_` and `-` are allowed, no spaces or other special characters.
          example: workflowhub_dev
        name:
          type: string
          description: The name of the registry
          example: WorkflowHub Dev
        type:
          description: "Registry type"
          $ref: "#/components/schemas/RegistryType"
        uri:
          type: string
          description: The URI of the registry
          example: https://dev.workflowhub.eu/
      required:
        - uuid
        - name
        - uri

    ListOfRegistries:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Registry"
      required:
        - items

    Timestamp:
      type: string
      example: 1616427012.0

    ROCrateBase:
      type: object
      description: Info about the workflow RO-Crate used to register the workflow on LifeMonitor
      properties:
        links:
          type: object
          properties:
            origin:
              type: string
              description: |
                The link to the workflow RO-Crate used to register the workflow on LifeMonitor
              example: "https://dev.workflowhub.eu/workflows/152/content_blobs/240/download"
            download:
              type: string
              description: |
                A link to download the workflow RO-Crate used to register the workflow on LifeMonitor
              example: https://api.lifemonitor.eu/ro_crates/11/download

    ROCrate:
      type: object
      description: Info about the workflow RO-Crate used to register the workflow on LifeMonitor
      allOf:
        - properties:
            metadata:
              $ref: "#/components/schemas/WorkflowTestingROCrate"
        - $ref: "#/components/schemas/ROCrateBase"

    WorkflowBase:
      type: object
      description: Basic information about a workflow
      properties:
        name:
          type: string
          description: |
            A name for the workflow. If not provided, the RO-Crate dataset name is used as default.
          example: "COVID-19 Workflow"
        public:
          type: boolean
          description: <code>true</code> if the workflow is <b>public</b>; false otherwise (default `false`).
          default: false
          example: false
        # authorization:
        #   type: string
        #   nullable: true
        #   writeOnly: true
        #   description: |
        #     An optional authorization header.
        #     The `authorization` parameter might be required to download
        #     the RO-Crate containing the workflow if it is not directly
        #     accessible to the user for download
        #     (e.g., `authorization: "ApiKey 1234567890"`).
        #   example: "Bearer xxx__ZRBhqf9eeRasjqMw90pgEeMpTZ7__"

    RegistryWorkflowBase:
      allOf:
        - $ref: "#/components/schemas/WorkflowBase"
        - type: object
          description: Registry workflow
          properties:
            identifier:
              type: string
              description: |
                The identifier of the workflow on the registry
              example: 148
            registry:
              description:
              $ref: "#/components/schemas/Registry"

    RegistryWorkflow:
      allOf:
        - $ref: "#/components/schemas/RegistryWorkflowBase"
        - type: object
          description: Registry workflow
          properties:
            latest_version:
              type: string
              description: The workflow identifier on the registry
              example: "1.0"
            versions:
              description: The list of workflow versions
              type: array
              items:
                type: string
              example: ["1.0", "1.0-dev"]

    ListOfRegistryWorkflows:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/RegistryWorkflowBase"
      required:
        - items

    WorkflowVersionBase:
      allOf:
        - $ref: "#/components/schemas/WorkflowBase"
        - type: object
          description: Basic information about a workflow version
          properties:
            version:
              type: string
              description: A string identifying the workflow version (e.g., 1.0)
              example: "1.0"
              writeOnly: true

    Workflow:
      allOf:
        - type: object
          properties:
            uuid:
              type: string
              description: |
                Universal unique identifier of the workflow.
                If not provided, it will be auto-generated by the system.
              example: 123e4567-e89b-12d3-a456-426614174000
            public:
              type: boolean
              description: <code>true</code> if the workflow is <b>public</b>; false otherwise (default `false`).
              default: false
              example: false
          required:
            - uuid
        - $ref: "#/components/schemas/WorkflowBase"

    GenericWorkflowVersion:
      description: Basic information about a workflow version
      allOf:
        - type: object
          properties:
            roc_link:
              type: string
              description: |
                Link to the workflow RO-Crate
              example: http://webserver:5000/download?file=ro-crate-galaxy-sortchangecase.crate.zip
            uuid:
              type: string
              description: |
                Universal unique identifier of the workflow.
              example: 123e4567-e89b-12d3-a456-426614174000
          required:
            - roc_link
        - $ref: "#/components/schemas/WorkflowVersionBase"

    RoCrateLinkWorkflowVersionBase:
      description: A generic workflow version from an exteranl RO-Crate
      allOf:
        - type: object
          properties:
            roc_link:
              type: string
              description: |
                Link to the workflow RO-Crate
              example: http://webserver:5000/download?file=ro-crate-galaxy-sortchangecase.crate.zip
            authorization:
              type: string
              nullable: true
              writeOnly: true
              description: |
                An optional authorization header.

                The `authorization` parameter might be required to download
                the RO-Crate containing the workflow if it is not directly
                accessible to the user for download
                (e.g., `authorization: "ApiKey 1234567890"`).
              example: "Bearer xxx__ZRBhqf9eeRasjqMw90pgEeMpTZ7__"
          required:
            - roc_link
        - $ref: "#/components/schemas/WorkflowVersionBase"

    RoCrateLinkWorkflowVersion:
      allOf:
        - type: object
          properties:
            uuid:
              type: string
              description: |
                Universal unique identifier of the workflow.
              example: 123e4567-e89b-12d3-a456-426614174000
        - $ref: "#/components/schemas/RoCrateLinkWorkflowVersionBase"
        - required: [version]

    RoCrateWorkflowVersionBase:
      description: A generic workflow version from an embedded (base64 encoded) **RO-Crate**
      allOf:
        - type: object
          properties:
            rocrate:
              type: string
              format: base64
              description: |
                Base64 encoding of the RO-Crate archive
          required:
            - rocrate
        - $ref: "#/components/schemas/WorkflowVersionBase"

    RoCrateWorkflowVersion:
      allOf:
        - type: object
          properties:
            uuid:
              type: string
              description: |
                Universal unique identifier of the workflow.
              example: 123e4567-e89b-12d3-a456-426614174000
        - $ref: "#/components/schemas/RoCrateWorkflowVersionBase"
        - required: [version]

    RegistryWorkflowVersion:
      description: A (version of a) workflow indexed by a registry.
      allOf:
        - type: object
          properties:
            identifier:
              type: string
              description: |
                The identifier of the workflow on the registry
              writeOnly: true
              example: "15"
          required:
            - identifier
        - $ref: "#/components/schemas/WorkflowVersionBase"
      example:
        {
          "identifier": "15",
          "name": "COVID-19 Workflow",
          "version": "1.0",
          "public": false,
        }

    WorkflowVersionMin:
      type: object
      properties:
        uuid:
          type: string
          description: |
            An internal unique identifier for the workflow version.
          example: 123e4567-e44b-12f3-a456-426614174123
          readOnly: true
        version:
          type: string
          description: A string identifying the version of the workflow
          example: "1.0"
        submitter_id:
          type: string
          writeOnly: true
        ro_crate:
          readOnly: true
          $ref: "#/components/schemas/ROCrateBase"
      required:
        - version

    WorkflowVersion:
      allOf:
        - $ref: "#/components/schemas/WorkflowVersionMin"
        - type: object
          properties:
            ro_crate:
              readOnly: true
              $ref: "#/components/schemas/ROCrate"
            is_latest:
              type: boolean
              readOnly: true
              description: |
                `true` if the workflow version is the latest,
                `false` otherwise.
              example: true
            submitter:
              $ref: "#/components/schemas/User"
              readOnly: true
              nullable: true
            authors:
              description: |
                List of authors/creators of the workflow
              type: array
              readOnly: true
              items:
                $ref: "#/components/schemas/Author"

    WorkflowVersionDetails:
      allOf:
        - $ref: "#/components/schemas/Workflow"
          readOnly: true
        - type: object
          properties:
            version:
              $ref: "#/components/schemas/WorkflowVersion"
              readOnly: true
            registries:
              nullable: true
              readOnly: true
              type: array
              items:
                $ref: "#/components/schemas/Registry"
          required:
            - version

    WorkflowDetails:
      allOf:
        - $ref: "#/components/schemas/WorkflowVersionDetails"
          readOnly: true
        - type: object
          properties:
            previous_versions:
              readOnly: true
              type: array
              items:
                $ref: "#/components/schemas/WorkflowVersionMin"
              example:
                [
                  {
                    uuid: "21ac72ec-b9a5-49e0-b5a6-1322b8b54552",
                    version: "0.1",
                    links:
                      {
                        origin: "http://webserver:5000/download?file=ro-crate-galaxy-sortchangecase.crate.zip",
                      },
                    ro_crate:
                      {
                        links:
                          {
                            "download": "https://lm:8000/workflows/123e4567-e89b-12d3-a456-426614174000/rocrate/1.0/download",
                            "metadata": "https://lm:8000/workflows/123e4567-e89b-12d3-a456-426614174000/rocrate/1.0/metadata",
                            "origin": "http://webserver:5000/download?file=ro-crate-galaxy-sortchangecase.crate.zip",
                          },
                      },
                    submitter: { id: 501, username: "lm" },
                  },
                ]

    ListOfWorkflow:
      type: object
      description: List of workflows
      properties:
        items:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Workflow"
              - properties:
                  status:
                    type: object
                    description: Summary of the workflow status
                    properties:
                      aggregate_test_status:
                        $ref: "#/components/schemas/AggregateTestStatus"
                      latest_builds:
                        description: "The most recent builds on some test instances"
                        type: array
                        items:
                          $ref: "#/components/schemas/BuildSummary"
                        nullable: true
                  versions:
                    nullable: true
                    readOnly: true
                    type: array
                    items:
                      $ref: "#/components/schemas/WorkflowVersion"
                    example:
                      [
                        {
                          uuid: "21ac72ec-b9a5-49e0-b5a6-1322b8b54552",
                          version: "1.0",
                          ro_crate:
                            {
                              links:
                                {
                                  origin: "https://dev.workflowhub.eu/workflows/142/content_blobs/240/download",
                                  download: "https://api.lifemonitor.eu/ro_crates/10/download",
                                },
                            },
                          is_latest: false,
                          submitter: { id: 501, username: "lm" },
                        },
                      ]
          required:
            - items

    AggregateTestStatus:
      type: string
      enum:
        - "all_passing"
        - "some_passing"
        - "all_failing"
        - "not_available"

    EntityTestStatus:
      type: object
      properties:
        aggregate_test_status:
          $ref: "#/components/schemas/AggregateTestStatus"
        latest_builds:
          description: "Latest builds, one for each test instance"
          type: array
          items:
            $ref: "#/components/schemas/BuildSummary"
        reason:
          description: "Reason why the status is unavailable"
          type: string
          nullable: true

    WorkflowVersionStatus:
      allOf:
        - $ref: "#/components/schemas/Workflow"
        - $ref: "#/components/schemas/EntityTestStatus"
          required:
            - aggregate_test_status
        - type: object
          properties:
            version:
              $ref: "#/components/schemas/WorkflowVersion"
          required:
            - version

    WorkflowTestingROCrate:
      type: object
      description: |
        [Workflow Testing RO-Crate](https://github.com/crs4/life_monitor/wiki/Workflow-Testing-RO-Crate)
        metadata
      externalDocs:
        description: Workflow RO-Crate Test
        url: https://github.com/crs4/life_monitor/wiki/Workflow-Testing-RO-Crate

    TestSuiteDefinition:
      type: object
      description: |
        Test Suite metadata
      properties:
        test_engine:
          type: object
          description: |
            Software application that runs workflow tests according to a definition.
          properties:
            path:
              type: string
              description: Relative path to the file containing the test definition              
            test_engine:
              $ref: "#/components/schemas/TestEngine"              

    TestEngine:
      type: object
      description: |
        Test Suite metadata
      properties:
        test_engine:
          type: object
          description: |
            Software application that runs workflow tests according to a definition.
          properties:
            type:
              type: string
              description: Type of the software engine (e.g., planemo, etc.)
              example: planemo
            version:
              type: string
              description: Version of the software engine
              example: ">=0.70"
          required:
            - type

    TestSuite:
      allOf:
        - type: object
          properties:
            uuid:
              type: string
              description: Universal unique identifier of the test suite
              example: e3208b02-69b6-4e32-a3dc-b93967d30e2c
            roc_suite:
              type: string
              description: RO-Crate identifier of the TestSuite
              example: "#test1"
            name:
              type: string
              description: A name for the test suite.
              example: Workflow Test Suite
            definition:
              $ref: "#/components/schemas/TestSuiteDefinition"
            instances:
              type: array
              items:
                $ref: "#/components/schemas/TestInstance"
          required:
            - uuid
            - instances
        - $ref: "#/components/schemas/EntityTestStatus"

    ListOfTestSuite:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/TestSuite"
      required:
        - items

    TestSuiteStatus:
      allOf:
        - type: object
          properties:
            suite_uuid:
              type: string
              description: Universal unique identifier of the test suite
              example: e3208b02-69b6-4e32-a3dc-b93967d30e2c
          required:
            - suite_uuid
        - $ref: "#/components/schemas/EntityTestStatus"

    BuildStatus:
      type: string
      enum:
        - passed
        - failed
        - error
        - aborted
        - running
        - waiting

    BuildSummary:
      type: object
      properties:
        build_id:
          type: string
          description: |
            An identifier for this build,
            as provided by the testing service back-end
          example: 167444
        suite_uuid:
          type: string
          description: Universal unique identifier of the test suite
          example: e3208b02-69b6-4e32-a3dc-b93967d30e2c
        status:
          $ref: "#/components/schemas/BuildStatus"
        instance:
          $ref: "#/components/schemas/TestInstance"
        timestamp:
          type: string
          description: |
            A timestamp for the start time of the build
          example: 1616427012.0
        duration:
          type: integer
          description: Build duration in seconds
          example: 2648
        links:
          type: object
          properties:
            origin:
              type: string
              description: Link to the test build on the testing service
              example: "https://github.com/crs4/life_monitor/actions/runs/968650807"
      required:
        - build_id
        - suite_uuid
        - instance
        - timestamp

    ListOfBuildSummary:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BuildSummary"
      required:
        - items

    Build:
      type: object
      properties:
        build_id:
          type: string
          description: |
            An identifier for this build,
            as provided by the testing service back-end
        suite_uuid:
          type: string
          description: Universal unique identifier of the test suite
          example: e3208b02-69b6-4e32-a3dc-b93967d30e2c
        status:
          $ref: "#/components/schemas/BuildStatus"
        instance:
          $ref: "#/components/schemas/TestInstance"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        duration:
          type: integer
          description: Build duration in seconds
          example: 2648
      required:
        - build_id
        - suite_uuid
        - status
        - instance
        - timestamp

    TestingServiceType:
      type: string
      description: Supported testing service back-ends
      enum:
        - travis
        - jenkins
        - github

    TestingService:
      type: object
      properties:
        type:
          description: The type of testing service
          $ref: "#/components/schemas/TestingServiceType"
          example: "travis"
        url:
          type: string
          description: "The base URL of the testing service"
          example: https://travis-ci.org/
      required:
        - type
        - url

    TestInstanceBase:
      type: object
      properties:
        roc_instance:
          type: string
          description: |
            RO-Crate identifier of the test instance if the instance comes
            from a Workflow RO-Crate
          example: "#test1_1"
          readOnly: true
        managed:
          type: boolean
          description: |
            `true` for **managed**;
            `false` for **unmanaged**
          example: false
      required:
        - managed

    TestInstance:
      description: "Test Instance"
      allOf:
        - type: object
          properties:
            uuid:
              type: string
              description: |
                Universal unique identifier of the test instance
              readOnly: true
              example: ba5bbdc3-d9fb-4381-a1d8-96a8ac5594d7
            name:
              type: string
              description: |
                The name assigned to the test instance
              example: test_instance_1
            service:
              $ref: "#/components/schemas/TestingService"
            resource:
              type: string
              description: |
                The relative path of the test project on the testing service
              example: github/seek4science/seek
            links:
              type: object
              properties:
                origin:
                  type: string
                  description: Link to the test instance on the testing service
                  example: "https://github.com/crs4/life_monitor/workflows/docs.yaml"
                  nullable: true
          required:
            - service
            - resource
        - $ref: "#/components/schemas/TestInstanceBase"
      example:
        {
          "managed": false,
          "name": "test_instance_1",
          "service": { "type": "travis", "url": "https://travis-ci.org/" },
          "resource": "github/seek4science/seek",
        }

    ManagedTestInstanceCreationData:
      description: "Managed Test Instance"
      allOf:
        - type: object
          description: |
            Information to be provided for the creation of
            a managed test instance.  At the moment it's empty.
        - $ref: "#/components/schemas/TestInstanceBase"

      example: { "managed": true, "name": "unmanaged_test_instance_1" }

    ListOfTestInstance:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/TestInstance"
      required:
        - items

    Error:
      type: object
      description: |
        The canonical model for problem details is a JSON [RFC7159] object.
      properties:
        type:
          type: string
          description: |
            "type" (string) - An absolute URI [RFC3986] that identifies the
            problem type.  When dereferenced, it SHOULD provide human-readable
            documentation for the problem type (e.g., using HTML
            [W3C.REC-html401-19991224]).  When this member is not present, its
            value is assumed to be "about:blank".
          default: "about:blank"
        title:
          type: string
          description: |
            "title" (string) - A short, human-readable summary of the problem
            type.  It SHOULD NOT change from occurrence to occurrence of the
            problem, except for purposes of localisation.
        status:
          type: integer
          description: |
            "status" (number) - The HTTP status code ([RFC7231], Section 6)
            generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          description: |
            "detail" (string) - An human readable explanation specific to this
            occurrence of the problem.
        instance:
          type: string
          description: |
            "instance" (string) - An absolute URI that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.
        extra_info:
          type: object
          description: Additional information
      required:
        - title
        - status

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: lifemonitor_session  # cookie name
      x-apikeyInfoFunc: lifemonitor.auth.services.check_cookie

    apiKey:
      type: apiKey
      in: header
      name: ApiKey
      x-apikeyInfoFunc: lifemonitor.auth.services.check_api_key
      description: |
        Allows a **user** to interact with the LifeMonitor API. It acts as a
        static authentication token and can be generated via the LifeMonitor
        user interface after logging in. This authentication method can be
        used to quickly try API calls via the API docs interface or tools like
        `curl`.
    RegistryClientCredentials:
      type: oauth2
      x-tokenInfoFunc: lifemonitor.auth.oauth2.server.services.get_token_scopes
      description: |
        Allows a **registry client** to directly interact with the LifeMonitor API.
        The client can query which of its users and workflows have been registered
        with the LifeMonitor service, register workflows
        and query their status.
      flows:
        clientCredentials:
          tokenUrl: "oauth2/token"
          scopes:
            registry.info: Get information about the current registry client
            registry.user: Get information about users of the current registry
            registry.workflow.read: Get information about registry workflows posted to LifeMonitor, including test suites and instances
            registry.workflow.write: Post registry workflows to LifeMonitor, including test suites and instances
            registry.user.workflow.read: Get information about registry user's workflows posted to LifeMonitor, including test suites and instances
            registry.user.workflow.write: Post registry user's workflows to LifeMonitor, including test suites and instances
            workflow.read: Get information about workflows posted to LifeMonitor, including test suites and instances
            workflow.write: Post workflows to LifeMonitor, including test suites and instances
            testingService.read: Get information about testing services
            testingService.write: Register testing services

    RegistryCodeFlow:
      type: oauth2
      x-tokenInfoFunc: lifemonitor.auth.oauth2.server.services.get_token_scopes
      description: |
        Allows a **registry client** to interact with the LifeMonitor API on behalf of a user.
        For instance, the client can register
        workflows belonging to the user and query their status.
      flows:
        authorizationCode:
          tokenUrl: "oauth2/token"
          authorizationUrl: "oauth2/authorize"
          scopes:
            user.profile: Get basic information about the current user profile
            user.workflow.read: Get information about user's workflows posted to LifeMonitor, including test suites and instances
            registry.info: Get information about the current registry client
            registry.user: Get information about users of the current registry
            registry.workflow.read: Get information about registry workflows posted to LifeMonitor, including test suites and instances
            registry.workflow.write: Post registry workflows to LifeMonitor, including test suites and instances
            registry.user.workflow.read: Get information about registry user's workflows posted to LifeMonitor, including test suites and instances
            registry.user.workflow.write: Post registry user's workflows to LifeMonitor, including test suites and instances
            workflow.read: Get information about workflows posted to LifeMonitor, including test suites and instances
            workflow.write: Post workflows to LifeMonitor, including test suites and instances
            testingService.read: Get information about testing services
            testingService.write: Register testing services

    AuthorizationCodeFlow:
      type: oauth2
      x-tokenInfoFunc: lifemonitor.auth.oauth2.server.services.get_token_scopes
      description: |
        Allows an OAuth2 client to interact with LifeMonitor on behalf of a
        **user**. This authentication method is appropriate for applications
        that need to interact with LifeMonitor as a user.
      flows:
        authorizationCode:
          tokenUrl: "oauth2/token"
          authorizationUrl: "oauth2/authorize"
          scopes:
            user.profile: Get basic information about the current user profile
            user.workflow.read: Get information about user's workflows posted to LifeMonitor, including test suites and instances
            user.workflow.write: Post user's workflows to LifeMonitor, including test suites and instances
            workflow.read: Get information about workflows posted to LifeMonitor, including test suites and instances
            workflow.write: Post workflows to LifeMonitor, including test suites and instances
            testingService.read: Get information about testing services
            testingService.write: Register testing services
