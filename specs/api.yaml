# vim: set et sw=2

openapi: "3.0.0"
info:
  version: "0.0.1"
  title: "Life Monitor API"
  description: "Workflow sustainability service"

servers:
  - url: /
    description: >
      Version 0.0 of API.  Add version prefix (e.g, /v1.0) once we have something useful

paths:
  /me:
    get:
      x-openapi-router-controller: lifemonitor.auth.controllers
      operationId: "show_current_user_profile"
      summary: "Get the profile of the current logged user"
      responses:
        '200':
          description: User profile info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


  /workflows:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get"
      summary: "Get all known workflows"
      security:
        - api_key: ['read']
        - oauth2: ['read']
      responses:
        '200':
          description: A JSON array of Workflow objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfWorkflow'

    post:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_post"
      summary: "Register a workflow"
      security:
        - api_key: ['read', 'write']
        - oauth2: ['read', 'write']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '201':
          description: Workflow created

  /workflows/{wf_uuid}:
    get:
      summary: "Get information about latest version of specified workflow"
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_latest_by_id"
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
      responses:
        '200':
          description: >
            A Workflow object for the latest version of the specified workflow
            and extended with the list of previous versions that are registered.
            Information about the previous versions can be retrieved through the
            `/workflows/{wf_uuid}/{wf_version}` resource.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Workflow'
                  - type: object
                    properties:
                      previous_versions:
                        type: array
                        items:
                          type: string
                    required:
                      - previous_versions
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /workflows/{wf_uuid}/{wf_version}:
    get:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_get_by_id"
      summary: "Get information about a single workflow"
      security:
        - api_key: ['read']
        - oauth2: ['read']
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
        - $ref: '#/components/parameters/wf_version'
      responses:
        '200':
          description: A Workflow object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_put"
      summary: "Modify an existing workflow"
      security:
        - api_key: ['read', 'write']
        - oauth2: ['read', 'write']
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
        - $ref: '#/components/parameters/wf_version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '200':
          description: "Workflow updated"

    delete:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "workflows_delete"
      summary: "Delete a workflow"
      security:
        - api_key: ['read', 'write']
        - oauth2: ['read', 'write']
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
        - $ref: '#/components/parameters/wf_version'
      responses:
        '200':
          description: Does not exist
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'

  /workflows/{wf_uuid}/{wf_version}/status:
    get:
      summary: "Get test statuses of a single workflow"
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
        - $ref: '#/components/parameters/wf_version'
      responses:
        '200':
          description: Summary of status of the specified workflow's tests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'


  /workflows/{wf_uuid}/{wf_version}/suites:
    get:
      summary: "Get list of test suites associated with workflow"
      description: >
        Get collection of test suites associated with workflow.  Test suites
        are collected from the RO-crate received with the creation of a new
        version of a workflow.
      parameters:
        - $ref: '#/components/parameters/wf_uuid'
        - $ref: '#/components/parameters/wf_version'
      responses:
        '200':
          description: List of TestSuites associated with the specified workflow version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfTestSuite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /suites/{suite_uuid}:
    get:
      summary: "Get info about a single test suite."
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
      responses:
        '200':
          description: TestSuite
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSuite'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      x-openapi-router-controller: lifemonitor.api.controllers
      operationId: "suites_delete"
      summary: "Delete a test suite"
      security:
        - api_key: ['read', 'write']
        - oauth2: ['read', 'write']
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
      responses:
        '200':
          description: Does not exist
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'

  /suites/{suite_uuid}/status:
    get:
      summary: >
        Get status of latest build for this test suite for each known instance
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
      responses:
        '200':
          description: TestSuiteStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSuiteStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /suites/{suite_uuid}/instances:
    get:
      summary: "Get list of instances of this suite present on testing services"
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
      responses:
        '200':
          description: "List of test instances for this test suite"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfSuiteInstance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: "Register or add an instance that executes this test suite"
      description: |
        POSTing this resource results in the creation of a new test suite
        instance.  That is, a specific test suite hosted and executed on a
        specific testing service.

        Two types of test instances can be created:  managed and unmanaged.
        A *managed* test instance is managed by LifeMonitor on its
        own testing infrastructure.
        An *unmanaged" test instance is hosted on an external testing service
        and LifeMonitor can only monitor it (query information about test
        results through the service's API).
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    managed:
                      type: boolean
                  required:
                    - managed
                - anyOf:
                  - $ref: '#/components/schemas/SuiteInstance'
                  - $ref: '#/components/schemas/ManagedSuiteInstanceCreationData'
      responses:
        '201':
          description: Instance created
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'


  /suites/{suite_uuid}/{instance_id}/latest-builds:
    get:
      summary: >
        Get summaries of latest builds for this test suite, on this instance
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
        - $ref: '#/components/parameters/instance_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: "Build summary list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfBuildSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'


  /suites/{suite_uuid}/{instance_id}/{build_id}:
    get:
      summary: "Get specific build info"
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
        - $ref: '#/components/parameters/instance_id'
        - $ref: '#/components/parameters/build_id'
      responses:
        '200':
          description: "Build data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /suites/{suite_uuid}/{instance_id}/{build_id}/logs:
    get:
      summary: "Get build logs"
      parameters:
        - $ref: '#/components/parameters/suite_uuid'
        - $ref: '#/components/parameters/instance_id'
        - $ref: '#/components/parameters/build_id'
        - $ref: '#/components/parameters/offset_bytes'
        - $ref: '#/components/parameters/limit_bytes'
      responses:
        '200':
          description: "Log data"
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  parameters:
    wf_uuid:
      name: "wf_uuid"
      description: "Workflow's Unique identifier"
      in: path
      schema:
        type: string
      required: true
    wf_version:
      name: "wf_version"
      description: "Workflow's version"
      in: path
      schema:
        type: string
      required: true
    suite_uuid:
      name: "suite_uuid"
      description: "TestSuite's Unique identifier"
      in: path
      schema:
        type: string
      required: true
    instance_id:
      name: "instance_id"
      description: "Test service Instance Unique identifier"
      in: path
      schema:
        type: string
      required: true
    build_id:
      name: "build_id"
      description: "Build identifier"
      in: path
      schema:
        type: string
      required: true
    limit:
      name: "limit"
      in: query
      schema:
        type: integer
        minimum: 1
        default: 10
      description: "Maximum number of items to retrieve"
    limit_bytes:
      name: "limit_bytes"
      description: "Maximum number of log bytes to retrieve"
      in: query
      schema:
        type: integer
        minimum: 1
        default: 131072 # 128 kB
    offset_bytes:
      name: "offset_bytes"
      description: "Number of bytes to skip while fetching the log"
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: The request is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        identities:
          type: object
      required:
        - id
    Timestamp:
      type: string

    Workflow:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        roc_link:
          type: string
        name:
          type: string
        submitter_id:
          type: string
          writeOnly: true
      required:
        - uuid
        - version
        - roc_link

    ListOfWorkflow:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
      required:
        - items

    WorkflowStatus:
      type: object
      properties:
        workflow:
          type: object
          properties:
            uuid:
              type: string
            version:
              type: string
            name:
              type: string
          required:
            - uuid
            - version
        aggregate_test_status:
          $ref: '#/components/schemas/AggregateTestStatus'
        latest_builds:
          description: "Latest builds, one for each test instance"
          type: array
          items:
            $ref: '#/components/schemas/BuildSummary'

    AggregateTestStatus:
      type: string
      enum:
        - "all_passing"
        - "some_passing"
        - "all_failing"
        - "not_available"

    TestSuite:
      type: object
      properties:
        uuid:
          type: string
        test_suite_metadata:
          type: object
          description: "To be determined."
        instances:
          type: array
          items:
            $ref: '#/components/schemas/TestInstance'
      required:
        - uuid
        - test_suite_metadata
        - instances

    ListOfTestSuite:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TestSuite'
      required:
        - items

    TestSuiteStatus:
      type: object
      properties:
        suite_uuid:
          type: string
        status:
          $ref: '#/components/schemas/AggregateTestStatus'
        latest_builds:
          type: array
          items:
            $ref: '#/components/schemas/BuildSummary'
      required:
        - suite_uuid
        - status

    BuildStatus:
      type: string
      enum:
        - passed
        - failed
        - error
        - running
        - waiting

    BuildSummary:
      type: object
      properties:
        build_id:
          type: string
        suite_uuid:
          type: string
        status:
          $ref: '#/components/schemas/BuildStatus'
        instance:
          $ref: '#/components/schemas/TestInstance'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        last_logs:
          type: string
          description: "Last few lines of build log, if available"
      required:
        - build_id
        - suite_uuid
        - instance
        - timestamp

    ListOfBuildSummary:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BuildSummary'
      required:
        - items

    Build:
      type: object
      properties:
        build_id:
          type: string
        suite_uuid:
          type: string
        status:
          $ref: '#/components/schemas/BuildStatus'
        instance:
          $ref: '#/components/schemas/TestInstance'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          # other things to be added
      required:
        - build_id
        - suite_uuid
        - status
        - instance
        - timestamp


    TestInstance:
      type: object
      properties:
        name:
          type: string
        service:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
            resource:
              type: string
          required:
            - type
            - url
      required:
        - service

    ListOfTestInstance:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TestInstance'
      required:
        - items

    ManagedTestInstanceCreationData:
      type: object
      description: |
        This object collects the information to be provided for the creation of
        a managed test instance.  At the moment it's empty.

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: ApiKey
      x-apikeyInfoFunc: lifemonitor.auth.services.check_api_key
    oauth2:
      type: oauth2
      x-tokenInfoFunc: lifemonitor.auth.oauth2.server.services.get_token_scopes
      flows:
        authorizationCode:
          tokenUrl: "oauth/token"
          authorizationUrl: "oauth/authorize"
          scopes:
            read: Read data and metadata (including that of private resources)
            write: Write data and metadata of private resources
