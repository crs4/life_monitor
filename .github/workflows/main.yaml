name: CI Pipeline

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "**"
    tags:
      - "*.*.*"
  pull_request:

env:
  # enable Docker push only if the required secrets are defined
  ENABLE_DOCKER_PUSH: ${{ secrets.DOCKERHUB_USER != null && secrets.DOCKERHUB_TOKEN != null }}

jobs:
  # Verifies pep8, pyflakes and circular complexity
  flake8:
    name: Check Flake8 (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install flake8
        run: pip install flake8
      - name: Run checks
        run: flake8 -v .

  # Validate OpenAPI specs
  openapi_specs:
    name: Check OpenAPI Specs (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install OpenAPI Spec Validator
        run: pip install openapi-spec-validator
      - name: Run checks
        run: openapi-spec-validator specs/api.yaml

  # Build, Test and Push Docker image
  tests:
    name: Build, Test and Push Docker image
    runs-on: ubuntu-latest
    needs: [flake8, openapi_specs]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Set Docker image
      - name: Set up Docker repository
        run: echo "DOCKERHUB_REPO=$( if [[ -n $USER_REPO ]]; then echo $USER_REPO; else echo $GITHUB_REPOSITORY; fi )" >> $GITHUB_ENV
        env:
          USER_REPO: ${{ secrets.DOCKERHUB_REPO }}
      # Extract Docker metadata
      - name: Set up Docker metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKERHUB_REPO }}
      # Build Docker image
      - name: Build Docker image
        run: make lifemonitor
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          LABELS: ${{ steps.docker_meta.outputs.labels }}
      # Setup testing environment
      - name: Set up testing environment
        run: make start-testing
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          LABELS: ${{ steps.docker_meta.outputs.labels }}
      # Run tests
      - name: Run tests
        run: make run-tests
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          LABELS: ${{ steps.docker_meta.outputs.labels }}
      # Teardown testing environment
      - name: Teardown testing environment
        run: make stop-all
      # DockerHub Login
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ env.ENABLE_DOCKER_PUSH == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Push Docker image
      - name: Push Docker image
        if: ${{ env.ENABLE_DOCKER_PUSH == 'true' }}
        run: |
          for t in ${{ steps.docker_meta.outputs.tags }}; do
            docker push ${t}
          done
