name: CI Pipeline

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  # Verifies pep8, pyflakes and circular complexity
  flake8:
    name: Check Flake8 (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install flake8
        run: pip install flake8
      - name: Run checks
        run: flake8 -v .

  # Validate OpenAPI specs
  openapi_specs:
    name: Check OpenAPI Specs (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install OpenAPI Spec Validator
        run: pip install openapi-spec-validator
      - name: Run checks
        run: openapi-spec-validator specs/api.yaml

  # Run LifeMonitor tests
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [flake8, openapi_specs]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Setup testing environment
      - name: Set up testing environment
        run: make start-testing
      # Run tests
      - name: Run tests
        run: make run-tests
      # Teardown testing environment
      - name: Teardown testing environment
        run: make stop-all

  # Build and push the 'crs4/lifemonitor' image
  # The image will be tagged and annotated accordingly to the OCI Image Format Specification
  # (https://github.com/opencontainers/image-spec/blob/master/annotations.md)
  docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name != 'pull_request' && github.repository_owner == 'crs4'
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Generate temporary certificates
        run: make certs
      - name: Set up Docker metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: crs4/lifemonitor
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/lifemonitor.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
