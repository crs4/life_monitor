# Copyright (c) 2020-2024 CRS4
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import logging
import signal

import click
from rich.console import Console
from rich.text import Text

from cli.client import __version__
from lifemonitor.metrics import start_metrics_server

logger = logging.getLogger(__name__)


@click.command(help=f"LifeMonitor Metrics Server (ver {__version__})")
@click.option("-p", "--port", "port", type=int, default=8001, show_default=True)
@click.option('-d', '--debug', is_flag=True, default=False, help="Enable debug mode")
def cli(port, debug):
    f""" LifeMonitor Metrics Server (ver {__version__}) """
    if debug:
        logging.basicConfig(level=logging.DEBUG)
    logger.debug(f"Starting server @ {port}")
    start_metrics_server(port)


@click.command(help="Show version")
def version():
    console = Console()
    console.print(Text.assemble("Version: ", Text(__version__, style="white bold")))


def handler(signum, frame):
    res = input("Do you really want to exit? y/n ")
    if res == 'y':
        exit(1)


signal.signal(signal.SIGINT, handler)

if __name__ == '__main__':
    cli()
